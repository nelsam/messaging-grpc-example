// Code generated by protoc-gen-go. DO NOT EDIT.
// source: instant_messaging_service.proto

/*
Package messaging is a generated protocol buffer package.

It is generated from these files:
	instant_messaging_service.proto
	message.proto
	message_service.proto
	user.proto
	user_service.proto

It has these top-level messages:
	ConnectAuth
	AuthedIM
	Message
	Thread
	AuthedMessage
	ThreadReply
	Auth
	Ident
	Profile
	AuthedProfile
*/
package messaging

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// ConnectAuth authorizes an instant message connection between two users.
type ConnectAuth struct {
	Auth *Auth    `protobuf:"bytes,1,opt,name=auth" json:"auth,omitempty"`
	From *Profile `protobuf:"bytes,2,opt,name=from" json:"from,omitempty"`
	To   *Profile `protobuf:"bytes,3,opt,name=to" json:"to,omitempty"`
}

func (m *ConnectAuth) Reset()                    { *m = ConnectAuth{} }
func (m *ConnectAuth) String() string            { return proto.CompactTextString(m) }
func (*ConnectAuth) ProtoMessage()               {}
func (*ConnectAuth) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ConnectAuth) GetAuth() *Auth {
	if m != nil {
		return m.Auth
	}
	return nil
}

func (m *ConnectAuth) GetFrom() *Profile {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *ConnectAuth) GetTo() *Profile {
	if m != nil {
		return m.To
	}
	return nil
}

// AuthedIM is a message with authorization attached.
type AuthedIM struct {
	Auth    *Auth    `protobuf:"bytes,1,opt,name=auth" json:"auth,omitempty"`
	Message *Message `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
}

func (m *AuthedIM) Reset()                    { *m = AuthedIM{} }
func (m *AuthedIM) String() string            { return proto.CompactTextString(m) }
func (*AuthedIM) ProtoMessage()               {}
func (*AuthedIM) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *AuthedIM) GetAuth() *Auth {
	if m != nil {
		return m.Auth
	}
	return nil
}

func (m *AuthedIM) GetMessage() *Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func init() {
	proto.RegisterType((*ConnectAuth)(nil), "messaging.ConnectAuth")
	proto.RegisterType((*AuthedIM)(nil), "messaging.AuthedIM")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for InstantMessageService service

type InstantMessageServiceClient interface {
	// Send sends a message to a user.  We don't use streaming here
	// because grpc-web doesn't handle client-side streaming.
	Send(ctx context.Context, in *AuthedIM, opts ...grpc.CallOption) (*Message, error)
	// Connect connects to an IM session with a user.
	Connect(ctx context.Context, in *ConnectAuth, opts ...grpc.CallOption) (InstantMessageService_ConnectClient, error)
}

type instantMessageServiceClient struct {
	cc *grpc.ClientConn
}

func NewInstantMessageServiceClient(cc *grpc.ClientConn) InstantMessageServiceClient {
	return &instantMessageServiceClient{cc}
}

func (c *instantMessageServiceClient) Send(ctx context.Context, in *AuthedIM, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := grpc.Invoke(ctx, "/messaging.InstantMessageService/Send", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *instantMessageServiceClient) Connect(ctx context.Context, in *ConnectAuth, opts ...grpc.CallOption) (InstantMessageService_ConnectClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_InstantMessageService_serviceDesc.Streams[0], c.cc, "/messaging.InstantMessageService/Connect", opts...)
	if err != nil {
		return nil, err
	}
	x := &instantMessageServiceConnectClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type InstantMessageService_ConnectClient interface {
	Recv() (*Message, error)
	grpc.ClientStream
}

type instantMessageServiceConnectClient struct {
	grpc.ClientStream
}

func (x *instantMessageServiceConnectClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for InstantMessageService service

type InstantMessageServiceServer interface {
	// Send sends a message to a user.  We don't use streaming here
	// because grpc-web doesn't handle client-side streaming.
	Send(context.Context, *AuthedIM) (*Message, error)
	// Connect connects to an IM session with a user.
	Connect(*ConnectAuth, InstantMessageService_ConnectServer) error
}

func RegisterInstantMessageServiceServer(s *grpc.Server, srv InstantMessageServiceServer) {
	s.RegisterService(&_InstantMessageService_serviceDesc, srv)
}

func _InstantMessageService_Send_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthedIM)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstantMessageServiceServer).Send(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messaging.InstantMessageService/Send",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstantMessageServiceServer).Send(ctx, req.(*AuthedIM))
	}
	return interceptor(ctx, in, info, handler)
}

func _InstantMessageService_Connect_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ConnectAuth)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(InstantMessageServiceServer).Connect(m, &instantMessageServiceConnectServer{stream})
}

type InstantMessageService_ConnectServer interface {
	Send(*Message) error
	grpc.ServerStream
}

type instantMessageServiceConnectServer struct {
	grpc.ServerStream
}

func (x *instantMessageServiceConnectServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

var _InstantMessageService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "messaging.InstantMessageService",
	HandlerType: (*InstantMessageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Send",
			Handler:    _InstantMessageService_Send_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Connect",
			Handler:       _InstantMessageService_Connect_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "instant_messaging_service.proto",
}

func init() { proto.RegisterFile("instant_messaging_service.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 235 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0xcf, 0xcc, 0x2b, 0x2e,
	0x49, 0xcc, 0x2b, 0x89, 0xcf, 0x4d, 0x2d, 0x2e, 0x4e, 0x4c, 0xcf, 0xcc, 0x4b, 0x8f, 0x2f, 0x4e,
	0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x84, 0x4b, 0x48,
	0x71, 0x95, 0x16, 0xa7, 0x16, 0x41, 0x84, 0xa5, 0x78, 0x21, 0xc2, 0x50, 0x55, 0x4a, 0x75, 0x5c,
	0xdc, 0xce, 0xf9, 0x79, 0x79, 0xa9, 0xc9, 0x25, 0x8e, 0xa5, 0x25, 0x19, 0x42, 0xca, 0x5c, 0x2c,
	0x89, 0xa5, 0x25, 0x19, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0xdc, 0x46, 0xfc, 0x7a, 0x70, 0x33, 0xf4,
	0x40, 0xd2, 0x41, 0x60, 0x49, 0x21, 0x35, 0x2e, 0x96, 0xb4, 0xa2, 0xfc, 0x5c, 0x09, 0x26, 0xb0,
	0x22, 0x21, 0x24, 0x45, 0x01, 0x45, 0xf9, 0x69, 0x99, 0x39, 0xa9, 0x41, 0x60, 0x79, 0x21, 0x25,
	0x2e, 0xa6, 0x92, 0x7c, 0x09, 0x66, 0x9c, 0xaa, 0x98, 0x4a, 0xf2, 0x95, 0x62, 0xb9, 0x38, 0x40,
	0x26, 0xa7, 0xa6, 0x78, 0xfa, 0x12, 0x67, 0xb9, 0x0e, 0x17, 0x3b, 0xd4, 0x07, 0x58, 0xec, 0xf7,
	0x85, 0xc8, 0x04, 0xc1, 0x94, 0x18, 0xb5, 0x32, 0x72, 0x89, 0x7a, 0x42, 0x02, 0x0a, 0x2a, 0x17,
	0x0c, 0x09, 0x24, 0x21, 0x43, 0x2e, 0x96, 0xe0, 0xd4, 0xbc, 0x14, 0x21, 0x61, 0x34, 0x6b, 0x40,
	0x2e, 0x91, 0xc2, 0x62, 0xa6, 0x12, 0x83, 0x90, 0x25, 0x17, 0x3b, 0x34, 0xac, 0x84, 0xc4, 0x90,
	0x14, 0x20, 0x85, 0x1f, 0x76, 0x8d, 0x06, 0x8c, 0x49, 0x6c, 0xe0, 0xd0, 0x36, 0x06, 0x04, 0x00,
	0x00, 0xff, 0xff, 0x0a, 0x73, 0x3d, 0x85, 0xb6, 0x01, 0x00, 0x00,
}
