// Code generated by protoc-gen-go. DO NOT EDIT.
// source: message_service.proto

package messaging

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// AuthedMessage is a combined authorization and message.
type AuthedMessage struct {
	Auth    *Auth    `protobuf:"bytes,1,opt,name=auth" json:"auth,omitempty"`
	Message *Message `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
}

func (m *AuthedMessage) Reset()                    { *m = AuthedMessage{} }
func (m *AuthedMessage) String() string            { return proto.CompactTextString(m) }
func (*AuthedMessage) ProtoMessage()               {}
func (*AuthedMessage) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *AuthedMessage) GetAuth() *Auth {
	if m != nil {
		return m.Auth
	}
	return nil
}

func (m *AuthedMessage) GetMessage() *Message {
	if m != nil {
		return m.Message
	}
	return nil
}

// ThreadReply is a message to be added to a thread.
type ThreadReply struct {
	Auth    *Auth    `protobuf:"bytes,1,opt,name=auth" json:"auth,omitempty"`
	Thread  *Thread  `protobuf:"bytes,2,opt,name=thread" json:"thread,omitempty"`
	Message *Message `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *ThreadReply) Reset()                    { *m = ThreadReply{} }
func (m *ThreadReply) String() string            { return proto.CompactTextString(m) }
func (*ThreadReply) ProtoMessage()               {}
func (*ThreadReply) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

func (m *ThreadReply) GetAuth() *Auth {
	if m != nil {
		return m.Auth
	}
	return nil
}

func (m *ThreadReply) GetThread() *Thread {
	if m != nil {
		return m.Thread
	}
	return nil
}

func (m *ThreadReply) GetMessage() *Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func init() {
	proto.RegisterType((*AuthedMessage)(nil), "messaging.AuthedMessage")
	proto.RegisterType((*ThreadReply)(nil), "messaging.ThreadReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for MessageService service

type MessageServiceClient interface {
	// Send sends a new message to a user.
	Send(ctx context.Context, in *AuthedMessage, opts ...grpc.CallOption) (*Thread, error)
	// Reply replies to a thread.
	Reply(ctx context.Context, in *ThreadReply, opts ...grpc.CallOption) (*Thread, error)
	// Delete deletes a message.
	Delete(ctx context.Context, in *AuthedMessage, opts ...grpc.CallOption) (*Thread, error)
}

type messageServiceClient struct {
	cc *grpc.ClientConn
}

func NewMessageServiceClient(cc *grpc.ClientConn) MessageServiceClient {
	return &messageServiceClient{cc}
}

func (c *messageServiceClient) Send(ctx context.Context, in *AuthedMessage, opts ...grpc.CallOption) (*Thread, error) {
	out := new(Thread)
	err := grpc.Invoke(ctx, "/messaging.MessageService/Send", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) Reply(ctx context.Context, in *ThreadReply, opts ...grpc.CallOption) (*Thread, error) {
	out := new(Thread)
	err := grpc.Invoke(ctx, "/messaging.MessageService/Reply", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) Delete(ctx context.Context, in *AuthedMessage, opts ...grpc.CallOption) (*Thread, error) {
	out := new(Thread)
	err := grpc.Invoke(ctx, "/messaging.MessageService/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MessageService service

type MessageServiceServer interface {
	// Send sends a new message to a user.
	Send(context.Context, *AuthedMessage) (*Thread, error)
	// Reply replies to a thread.
	Reply(context.Context, *ThreadReply) (*Thread, error)
	// Delete deletes a message.
	Delete(context.Context, *AuthedMessage) (*Thread, error)
}

func RegisterMessageServiceServer(s *grpc.Server, srv MessageServiceServer) {
	s.RegisterService(&_MessageService_serviceDesc, srv)
}

func _MessageService_Send_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthedMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).Send(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messaging.MessageService/Send",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).Send(ctx, req.(*AuthedMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_Reply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ThreadReply)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).Reply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messaging.MessageService/Reply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).Reply(ctx, req.(*ThreadReply))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthedMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messaging.MessageService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).Delete(ctx, req.(*AuthedMessage))
	}
	return interceptor(ctx, in, info, handler)
}

var _MessageService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "messaging.MessageService",
	HandlerType: (*MessageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Send",
			Handler:    _MessageService_Send_Handler,
		},
		{
			MethodName: "Reply",
			Handler:    _MessageService_Reply_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _MessageService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "message_service.proto",
}

func init() { proto.RegisterFile("message_service.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 225 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0xcd, 0x4d, 0x2d, 0x2e,
	0x4e, 0x4c, 0x4f, 0x8d, 0x2f, 0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f,
	0xc9, 0x17, 0xe2, 0x84, 0x08, 0x67, 0xe6, 0xa5, 0x4b, 0x71, 0x95, 0x16, 0xa7, 0x16, 0x41, 0x84,
	0xa5, 0x78, 0xa1, 0xaa, 0x21, 0x5c, 0xa5, 0x24, 0x2e, 0x5e, 0xc7, 0xd2, 0x92, 0x8c, 0xd4, 0x14,
	0x5f, 0x88, 0xb0, 0x90, 0x32, 0x17, 0x4b, 0x62, 0x69, 0x49, 0x86, 0x04, 0xa3, 0x02, 0xa3, 0x06,
	0xb7, 0x11, 0xbf, 0x1e, 0xdc, 0x14, 0x3d, 0x90, 0xba, 0x20, 0xb0, 0xa4, 0x90, 0x0e, 0x17, 0x3b,
	0xd4, 0x18, 0x09, 0x26, 0xb0, 0x3a, 0x21, 0x24, 0x75, 0x50, 0x93, 0x82, 0x60, 0x4a, 0x94, 0xba,
	0x19, 0xb9, 0xb8, 0x43, 0x32, 0x8a, 0x52, 0x13, 0x53, 0x82, 0x52, 0x0b, 0x72, 0x2a, 0x89, 0xb3,
	0x42, 0x93, 0x8b, 0xad, 0x04, 0xac, 0x07, 0x6a, 0x83, 0x20, 0x92, 0x32, 0xa8, 0x61, 0x50, 0x05,
	0xc8, 0xae, 0x61, 0x26, 0xe8, 0x1a, 0xa3, 0x6d, 0x8c, 0x5c, 0x7c, 0x50, 0xc1, 0x60, 0x48, 0x80,
	0x09, 0x99, 0x72, 0xb1, 0x04, 0xa7, 0xe6, 0xa5, 0x08, 0x49, 0xa0, 0x39, 0x05, 0x1e, 0x2a, 0x52,
	0x98, 0xb6, 0x2b, 0x31, 0x08, 0x99, 0x70, 0xb1, 0x42, 0x3c, 0x24, 0x86, 0xe9, 0x36, 0x90, 0x38,
	0x76, 0x5d, 0xe6, 0x5c, 0x6c, 0x2e, 0xa9, 0x39, 0xa9, 0x25, 0xa9, 0x24, 0x5a, 0x97, 0xc4, 0x06,
	0x8e, 0x31, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0x88, 0xa4, 0x4f, 0x03, 0xf0, 0x01, 0x00,
	0x00,
}
